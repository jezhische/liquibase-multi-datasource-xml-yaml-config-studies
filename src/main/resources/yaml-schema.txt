СПИСОК:
        --- # Список фильмов: последовательность в блочном формате
        - Casablanca
        - Spellbound
        - Notorious
        --- # Список покупок: последовательность в однострочном формате
        [milk, bread, eggs, juice]

АССОЦИАТИВНЫЙ МАССИВ:
        --- # Блочный формат
        name: John Smith
        age: 33
        --- # Однострочный формат
        {name: John Smith, age: 33}

СПИСКИ ИЗ ПАР (ОБЪЕКТОВ):
        - {name: John Smith, age: 33}
        - name: Mary Smith
          age: 27

ПАРЫ (ОБЪЕКТЫ) ИЗ СПИСКОВ:
        men: [John Smith, Bill Jones]
        women:
          - Mary Smith
          - Susan Williams

БЛОЧНЫЕ ЛИТЕРАЛЫ:
        --- |       # переводы строк сохраняются
        --- >       # переводы строк исчезают (новый параграф создается с помощью пустой линии)


Синтаксическая шпаргалка
Небольшой список основных элементов YAML:

- потоки YAML используют печатаемые Unicode-символы, как UTF-8, так и UTF-16
- отступы из пробелов (символы табуляции не допускаются) используются для обозначения структуры
- комментарии начинаются с символа “решётки” ( # ), могут начинаться в любом месте строки и продолжаются до конца строки
- списки обозначаются начальным дефисом ( - ) с одним членом списка на строку, либо члены списка заключаются
в квадратные скобки ( [ ] ) и разделяются запятой и пробелом ( , )
- ассоциативные массивы представлены двоеточием с пробелом ( : ) в виде ключ: значение, по одной паре
ключ-значение на строку, либо в виде пар, заключённых в фигурные скобки и разделенных запятой и пробелом ( , )
    - ключ в ассоциативном массиве может иметь в качестве префикса вопросительный знак ( ? ), что позволяет указать
    сложный ключ, например представленный в виде списка
- строки записываются без кавычек, однако могут быть заключены в одиночные или двойные кавычки
    - внутри двойных кавычек могут быть использованы экранированные символы в C-стиле, начинающиеся с обратного слэша ( \ )
- YAML позволяет задавать подстановки с помощью якорей & и алиасов (*). Пример
            aliases:  #последовательность настроек
             - &myAlias1
               datakey: dataval 1
               moredata: morevals 1
             - &myAlias2
               datakey: dataval 2
               moredata: morevals 2
            config:
             - *myAlias1  # *myAlias1 после парсинга будет заменен на [{"datakey": "dataval 1", "moredata": "morevals 1"}]
- явное задание типа оформляется путём '!![указание типа]'. Пример, !!str 100 после парсинга выдаст строковое значение "100" вместо целого числа 100.
- значения типа Дата/Время задаются в формате YYYY-MM-DD или YYYY-MM-DD HH:MM:SS. Если необходимо задать дату, как строку, нужно заключать её в кавычки ("2012-12-21")





